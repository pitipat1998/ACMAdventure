import java.util.*;
import java.io.*;
import java.lang.*;

public class Parlindrome {
	
	static class FastReader
    {
        BufferedReader br;
        StringTokenizer st;
 
        public FastReader()
        {
            br = new BufferedReader(new
                     InputStreamReader(System.in));
        }
 
        String next()
        {
            while (st == null || !st.hasMoreElements())
            {
                try
                {
                    st = new StringTokenizer(br.readLine());
                }
                catch (IOException  e)
                {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }
 
        int nextInt()
        {
            return Integer.parseInt(next());
        }
 
        long nextLong()
        {
            return Long.parseLong(next());
        }
 
        double nextDouble()
        {
            return Double.parseDouble(next());
        }
 
        String nextLine()
        {
            String str = "";
            try
            {
                str = br.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
    }
	
	static int N;
	static String s, rev;
	static int[][] count;
	static HashMap<String, Integer> u;
	
	public static String reverse(String s) {
		StringBuilder sb = new StringBuilder();
		for(int i=s.length()-1; i>=0; i--) {
			sb.append(s.charAt(i));
		}
		return sb.toString();
	}
	
	public static int dp(int i, int j) {
		if(i>N-1 || j > N-1) return 0;
		String s = String.valueOf(i)+ "-"+String.valueOf(j);
		int c = 0;
		if(u.containsKey(s)) return u.get(s);
		else {
			if(s.charAt(i) == s.charAt(j)) c += 1 + dp(i+1, j+1);
			else c += Math.max(dp(i+1, j), dp(i, j+1));
		}
		u.put(s, c);
		return c;
	}
	
	public static void main(String[] args) {
		FastReader f = new FastReader();
		N = f.nextInt();
		s = f.nextLine();
		rev = reverse(s);
		count = new int[N][N];
		u = new HashMap<String, Integer>();
		System.out.println(dp(0, 0));
	}
}
