import java.io.*;
import java.util.*;
import java.lang.*;

public class DestroyingArray {
	static class FastReader
    {
        BufferedReader br;
        StringTokenizer st;
 
        public FastReader()
        {
            br = new BufferedReader(new
                     InputStreamReader(System.in));
        }
 
        String next()
        {
            while (st == null || !st.hasMoreElements())
            {
                try
                {
                    st = new StringTokenizer(br.readLine());
                }
                catch (IOException  e)
                {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }
 
        int nextInt()
        {
            return Integer.parseInt(next());
        }
 
        long nextLong()
        {
            return Long.parseLong(next());
        }
 
        double nextDouble()
        {
            return Double.parseDouble(next());
        }
 
        String nextLine()
        {
            String str = "";
            try
            {
                str = br.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
    }
	static int MAXN = 100;
	static int[] sizes = new int[MAXN];
	static int[] nodes = new int[MAXN];
	static long[] sums = new long[MAXN];
	static int[] D = new int[MAXN];
	static Set<Integer> visited = new HashSet<>();
	static long[] result = new long[MAXN]; static int ri = 0;
	
	public static int root(int v) {
		//System.out.println(v);
		if(nodes[v] != v) nodes[v] = root(nodes[v]);
		return nodes[v];
	}
	
	public static int find(int v) {
		return root(v);
	}
	
	public static int union(int u, int v) {
		int ru = root(u);
		int rv = root(v);
		if(sizes[ru] > sizes[rv]) {
			nodes[rv] = ru;
			sizes[ru] += sizes[rv];
			return v;
		}
		else {
			nodes[ru] = rv;
			sizes[rv] += sizes[ru];
			return u;
		}
	}
	
	public static void main(String[] args) {
		FastReader f = new FastReader();
		int N = f.nextInt();
		//System.out.println(N);
		for(int i=0; i<N; i++) {
			sums[i] = f.nextInt();
			//System.out.println(sums[i]);
			nodes[i] = i;
			sizes[i] = 1;
		}
		//System.out.println("hi");
		for(int i=0; i<N; i++) {
			D[i] = f.nextInt();
		}
		//System.out.println("yo");
		long max = 0;
		result[ri++] = 0;
		for(int i=N-1; i>0; i--) {
			//System.out.println(i);
			int d = D[i]-1;
			//System.out.println(d);
			if(visited.isEmpty()) {
				max = sums[d];
			}
			else {
				int rd;
				if(visited.contains(d+1) && find(d) != find(d+1)) {
					int x = union(d, d+1);
					rd = root(d);
					//System.out.println(rd);
					sums[rd] += sums[x];
					if(sums[rd] > max) max = sums[rd];
				}
				System.out.println(find(d) == find(d-1));
				if(visited.contains(d-1) && find(d) != find(d-1)) {
					int x = union(d, d-1);
					rd = root(d);
					sums[rd] += sums[x];
					if(sums[rd] > max) max = sums[rd];
				}
				if(!visited.contains(d+1) && !visited.contains(d-1)) {
					if(sums[d] > max) max = sums[d];
				}
			}
			System.out.println("d=" + d + " " + Arrays.toString(sums));
			visited.add(d);
			result[ri++] = max;
		}
		//System.out.println("ei");
		for(int i=ri-1; i>=0; i--) {
			System.out.println(result[i]);
		}
	}
}
