import java.util.*;
import java.io.*;
import java.lang.*;

public class CircularRMQ {
	
	static class FastReader
    {
        BufferedReader br;
        StringTokenizer st;
 
        public FastReader()
        {
            br = new BufferedReader(new
                     InputStreamReader(System.in));
        }
 
        String next()
        {
            while (st == null || !st.hasMoreElements())
            {
                try
                {
                    st = new StringTokenizer(br.readLine());
                }
                catch (IOException  e)
                {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }
 
        int nextInt()
        {
            return Integer.parseInt(next());
        }
 
        long nextLong()
        {
            return Long.parseLong(next());
        }
 
        double nextDouble()
        {
            return Double.parseDouble(next());
        }
 
        String nextLine()
        {
            String str = "";
            try
            {
                str = br.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
    }
	
	static class SegTree{
		int[] a;
		int[][] t;
		public SegTree(int[] a) {
			this.a = a;

			int d = (int)Math.ceil(Math.log(a.length)/Math.log(2));
			int si = 1 << d;
			t = new int[d+1][si];
			for(int i=0; i<si; i++) {
				if(i<a.length) t[0][i] = a[i];
				else t[0][i] = a[a.length-1];
			}
			for(int i=1; i<t.length; i++) {
				for(int j=0; j+(1<<(i-1)) < si; j += (1<<(i-1))) {
					t[i][j] = Math.min(t[i-1][j], t[i-1][j+(1<<(i-1))]);
				}
			}
		}
		
		private int leftChildIndex(int v, int h) {
			return 0;
		}
		
		private int rightChildIndex(int v, int h) {
			return v + (1<<(h-1));
		}
		
		private int parentIndex(int v, int h) {
			if(v % (1<<h+1) == 0) {
				return v;
			}
			else {
				return v-(1<<h);
			}
		}
		
		private int siblingIndex(int v, int h) {
			if(v % (1<<h) == 0) return v + (1<<h);
			else return v - (1<<h);
		}
		
		private boolean isRoot(int v, int h) {
			if(v > 0 || h < t.length-1) return false;
			return true;
		}
		
		private void swim(int i, int h) {
			while(!isRoot(i, h)) {
				t[h+1][parentIndex(i, h)] = Math.min(t[h][i], t[h][siblingIndex(i, h)]);
				i = parentIndex(i, h);
				h++;
			}
		}
		
		private int minInRange(int v, int h, int l, int r, int s, int e) {
			if(l == s && r == e) {
				return t[h][v];
			}
			else {
				int m = s + ((e-s)/2);
				int i = (l <= m)?minInRange(leftChildIndex(v, h), h-1, l, Math.min(m, l), s, m):Integer.MAX_VALUE;
				int j = (r > m)?minInRange(rightChildIndex(v, h), h-1, Math.max(r, m+1), r , m+1, e):Integer.MAX_VALUE;
				return Math.min(i,  j);
			}
		}
		
		public int minInRange(int l, int r) {
			if(l > r) {
				return Math.min(minInRange(0, t.length-1, l, t[0].length-1, 0, t[0].length-1), 
						minInRange(0, t.length-1, 0, r, 0, t[0].length-1));
			}
			else {
				return minInRange(0, t.length-1, l, r, 0, t[0].length-1);
			}
		}
		
		public void update(int l, int r, int v) {
			if(l > r) {
				for(int i=l; i<t[0].length; i++) {
					t[0][i] += v;
					swim(i, 0);
				}
				for(int i=0; i<=r; i++) {
					t[0][i] += v;
					swim(i, 0);
			}
			else {
				for(int i=l; i<=r; i++) {
					t[0][i] += v;
					swim(i, 0);
				}
			}
			
		}
		
	}
	
	
	
	public static void main(String[] args) {
		FastReader f = new FastReader();
		int N = f.nextInt();
		int[] arr = new int[N];
		for(int i=0; i<N; i++) {
			arr[i] = f.nextInt();
		}
		SegTree st = new SegTree(arr);
		for(int m=f.nextInt(); m>0; m--) {
			String[] q = f.nextLine().split(" ");
			int l,r,v;
			if(q.length == 2) {
				l = Integer.parseInt(q[0]);
				r = Integer.parseInt(q[1]);
				System.out.println(st.minInRange(l, r));
			}
			else {
				l = Integer.parseInt(q[0]);
				r = Integer.parseInt(q[1]);
				v = Integer.parseInt(q[2]);
				st.update(l, r, v);
				for(int[] x : st.t) {
					System.out.println(Arrays.toString(x));
				}
			}
		}
	}
}
